<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Fallback name="Check warnings">
            <SubTree ID="warnings"/>
            <Sequence name="Inspection">
                <SubTree ID="preflightChecks"/>
                <SubTree ID="performBlade" blade_angle="0"/>
                <SubTree ID="performBlade" blade_angle="120"/>
                <SubTree ID="performBlade" blade_angle="240"/>
                <SubTree ID="postInspection"/>
            </Sequence>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="NavigateDetecting">
        <Fallback>
            <Condition ID="GNCDetectObject" object="Nacelle"/>
            <Control ID="PipelineSequence">
                <Action ID="ComputePathToPose" goal="HUB" path="{path}" planner_id="" server_timeout="" service_name="" start=""/>
                <Action ID="FollowPath" controller_id="FollowPath" goal_checker_id="GoalChecker" path="{path}" server_timeout="" service_name=""/>
            </Control>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="NavigateWithReplanning">
        <Control ID="PipelineSequence">
            <Control ID="RecoveryNode" number_of_retries="1">
                <ReactiveSequence>
                    <Action ID="RemovePassedGoals" global_frame="" input_goals="{prism_wps}" output_goals="{prism_wps}" radius="0.5" robot_base_frame=""/>
                    <Action ID="ComputePathThroughPoses" goals="{prism_wps}" path="{path}" planner_id="" server_timeout="" service_name="" start=""/>
                </ReactiveSequence>
                <Action ID="GNCUnknown" name="Solution to failure computingPath"/>
            </Control>
            <Fallback>
                <Condition ID="GNCDetectObject" object="Root/Tip"/>
                <Control ID="RecoveryNode" number_of_retries="1">
                    <Sequence>
                        <Action ID="GNCFollowPath" controller_id="FollowPath" current_target="{target}" goal_checker_id="GoalChecker" path="{path}" server_timeout="" service_name=""/>
                        <Action ID="GNCTakeSnapshot" target="{target}"/>
                    </Sequence>
                    <Action ID="GNCComputeOfflimitFix" goals="{prism_wps}"/>
                </Control>
            </Fallback>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="NavigateWithReplanning1">
        <Control ID="PipelineSequence">
            <Control ID="RecoveryNode" number_of_retries="1">
                <Action ID="ComputePathToPose" goal="{wp2}" path="{path}" planner_id="" server_timeout="" service_name="" start="{wp1}"/>
                <Action ID="GNCUnknown" name="Solution to failure computing path"/>
            </Control>
            <Control ID="RecoveryNode" number_of_retries="1">
                <Action ID="FollowPath" controller_id="FollowPath" goal_checker_id="GoalChecker" path="{path}" server_timeout="" service_name=""/>
                <Action ID="GNCComputeOfflimitFix1" new_wp="{wp1}"/>
            </Control>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="NavigateWithReplanning1Snapshot">
        <Control ID="PipelineSequence">
            <Control ID="RecoveryNode" number_of_retries="1">
                <Action ID="ComputePathToPose" goal="{wp2}" path="{path}" planner_id="" server_timeout="" service_name="" start="{wp1}"/>
                <Action ID="GNCUnknown" name="Solution to failure computing path"/>
            </Control>
            <Control ID="RecoveryNode" number_of_retries="1">
                <Sequence>
                    <Action ID="FollowPath" controller_id="FollowPath" goal_checker_id="GoalChecker" path="{path}" server_timeout="" service_name=""/>
                    <Action ID="GNCTakeSnapshot" target=""/>
                </Sequence>
                <Action ID="GNCComputeOfflimitFix1" new_wp="{wp1}"/>
            </Control>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="getSensorsData">
        <Sequence>
            <Action ID="GetDroneData" drone_data="{drone_data}"/>
            <Action ID="GerLidarData" lidar_data="{lidar_data}"/>
            <Action ID="GetCameraData" camera_data="{camera_data}"/>
            <Action ID="GetForecastData" forecast_data="{forecast_data}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="performBlade">
        <Sequence>
            <Action ID="GNCComputePrism" blade_angle="{blade_angle}" prism="{prism_wps}"/>
            <SubTree ID="NavigateWithReplanning" goals="{prism_wps}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="performPhase">
        <Sequence>
            <Fallback>
                <Condition ID="isDroneAt" data="{drone_data}" target="WP1"/>
                <Action ID="flyTo" target="WP1" visited="{visited_WP1}"/>
            </Fallback>
            <Fallback>
                <Condition ID="isDroneAt" data="{drone_data}" target="WP2"/>
                <Sequence name="Perform phase">
                    <Fallback>
                        <Condition ID="GNCCondition" data="{lidar_data}" name="Dist to blade ~= 6 meters"/>
                        <Action ID="GNCAction" name="Recalculate target"/>
                    </Fallback>
                    <Fallback>
                        <Condition ID="GNCCondition" data="{camera_data}" name="Blade in image"/>
                        <Action ID="GNCAction" name="Recalculate target"/>
                    </Fallback>
                    <Action ID="flyTo" target="WP2" visited="{visited_WP2}"/>
                </Sequence>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="postInspection">
        <Sequence>
            <Fallback>
                <Condition ID="GoalReached" global_frame="" goal="HUB" robot_base_frame=""/>
                <Action ID="NavigateToPose" behavior_tree="" goal="HUB" server_timeout="" service_name=""/>
            </Fallback>
            <Fallback>
                <Condition ID="GoalReached" global_frame="" goal="LAND" robot_base_frame=""/>
                <Action ID="NavigateToPose" behavior_tree="" goal="LAND" server_timeout="" service_name=""/>
            </Fallback>
            <Fallback>
                <Inverter>
                    <Condition ID="GNCCondition" data="{drone_data}" name="Drone armed"/>
                </Inverter>
                <Sequence>
                    <Action ID="GNCAction" name="Disarm drone"/>
                    <Action ID="GNCAction" name="Rosbag stop"/>
                </Sequence>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="preflightChecks">
        <Sequence name="Preflight checks">
            <Fallback>
                <Condition ID="GNCCondition" data="{drone_data}" name="Inspection loaded"/>
                <Action ID="GNCAction" name="Load inspection"/>
            </Fallback>
            <Fallback>
                <Condition ID="GNCCondition" data="{drone_data}" name="Drone armed"/>
                <Sequence>
                    <Action ID="GNCAction" name="Arm drone"/>
                    <Action ID="GNCAction" name="Rosbag start"/>
                </Sequence>
            </Fallback>
            <Fallback>
                <Condition ID="GNCCondition" data="{drone_data}" name="Drone in air"/>
                <Fallback>
                    <Condition ID="GoalReached" global_frame="" goal="Take off" robot_base_frame=""/>
                    <Action ID="NavigateToPose" behavior_tree="" goal="Take off" name="Take off" server_timeout="" service_name=""/>
                </Fallback>
            </Fallback>
            <SubTree ID="NavigateDetecting"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="warnings">
        <Fallback name="Warnings">
            <Sequence>
                <Condition ID="IsBatteryLow" battery_topic="" is_voltage="" min_battery="" name="isWindHigh"/>
                <Action ID="NavigateToPose" behavior_tree="" goal="HOME" server_timeout="" service_name=""/>
            </Sequence>
            <Sequence>
                <Condition ID="GNCCollisionDetected"/>
                <Action ID="NavigateToPose" behavior_tree="" goal="" server_timeout="" service_name=""/>
            </Sequence>
            <Sequence>
                <Condition ID="IsBatteryLow" battery_topic="" is_voltage="" min_battery=""/>
                <Action ID="NavigateToPose" behavior_tree="" goal="HOME" server_timeout="" service_name=""/>
            </Sequence>
            <Sequence>
                <Condition ID="IsBatteryLow" battery_topic="" is_voltage="" min_battery="" name="IsGNSSPoor"/>
                <Action ID="GNCAction" name="Warn pilot to take control"/>
            </Sequence>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="BackUp">
            <input_port name="backup_dist">Distance to backup</input_port>
            <input_port name="backup_speed">Speed at which to backup</input_port>
            <input_port name="server_name">Service name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="time_allowance">Allowed time for reversing</input_port>
        </Action>
        <Action ID="CancelBackUp">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name to cancel the backup behavior</input_port>
        </Action>
        <Action ID="CancelControl">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name to cancel the controller server</input_port>
        </Action>
        <Action ID="CancelSpin">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name to cancel the spin behavior</input_port>
        </Action>
        <Action ID="CancelWait">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name to cancel the wait behavior</input_port>
        </Action>
        <Action ID="ClearEntireCostmap">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="ComputePathThroughPoses">
            <input_port name="goals">Destinations to plan through</input_port>
            <output_port name="path">Path created by ComputePathToPose node</output_port>
            <input_port name="planner_id">Mapped name to the planner plugin type to use</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
            <input_port name="start">Start pose of the path if overriding current robot pose</input_port>
        </Action>
        <Action ID="ComputePathToPose">
            <input_port name="goal">Destination to plan to</input_port>
            <output_port name="path">Path created by ComputePathToPose node</output_port>
            <input_port name="planner_id">Mapped name to the planner plugin type to use</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
            <input_port name="start">Start pose of the path if overriding current robot pose</input_port>
        </Action>
        <Action ID="ControllerSelector">
            <input_port name="default_controller">Default controller of the controller selector</input_port>
            <output_port name="selected_controller">Name of the selected controller received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive controller selection commands</input_port>
        </Action>
        <Decorator ID="DistanceController">
            <input_port name="distance">Distance</input_port>
            <input_port name="global_frame">Reference frame</input_port>
            <input_port name="robot_base_frame">Robot base frame</input_port>
        </Decorator>
        <Condition ID="DistanceTraveled">
            <input_port name="distance">Distance to check if passed</input_port>
            <input_port name="global_frame">reference frame to check in</input_port>
            <input_port name="robot_base_frame">Robot frame to check relative to global_frame</input_port>
        </Condition>
        <Action ID="DriveOnHeading">
            <input_port name="dist_to_travel">Distance to travel</input_port>
            <input_port name="server_name">Service name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="speed">Speed at which to travel</input_port>
            <input_port name="time_allowance">Allowed time for reversing</input_port>
        </Action>
        <Action ID="DriveOnHeadingCancel">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name to cancel the drive on heading behavior</input_port>
        </Action>
        <Action ID="FollowPath">
            <input_port default="FollowPath" name="controller_id"/>
            <input_port default="GoalChecker" name="goal_checker_id">Goal checker</input_port>
            <input_port name="path">Path to follow</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="GNCAction"/>
        <Condition ID="GNCCollisionDetected"/>
        <Action ID="GNCComputeOfflimitFix">
            <inout_port name="goals"/>
        </Action>
        <Action ID="GNCComputeOfflimitFix1">
            <output_port name="new_wp"/>
        </Action>
        <Action ID="GNCComputePrism">
            <input_port default="{blade_angle}" name="blade_angle"/>
            <output_port name="prism"/>
        </Action>
        <Condition ID="GNCCondition">
            <input_port name="data"/>
        </Condition>
        <Condition ID="GNCDetectObject">
            <input_port name="object"/>
        </Condition>
        <Action ID="GNCFollowPath">
            <input_port default="FollowPath" name="controller_id"/>
            <inout_port default="{target}" name="current_target"/>
            <input_port default="GoalChecker" name="goal_checker_id"/>
            <input_port name="path"/>
            <input_port name="server_timeout"/>
            <input_port name="service_name"/>
        </Action>
        <Action ID="GNCTakeSnapshot">
            <input_port name="target"/>
        </Action>
        <Action ID="GNCUnknown"/>
        <Action ID="GerLidarData">
            <output_port name="lidar_data"/>
        </Action>
        <Action ID="GetCameraData">
            <output_port name="camera_data"/>
        </Action>
        <Action ID="GetDroneData">
            <output_port name="drone_data"/>
        </Action>
        <Action ID="GetDronePose">
            <output_port name="drone_pose"/>
        </Action>
        <Action ID="GetForecastData">
            <input_port name="forecast_data"/>
        </Action>
        <Condition ID="GlobalUpdatedGoal"/>
        <Action ID="GoalCheckerSelector">
            <input_port name="default_goal_checker">Default goal checker of the controller selector</input_port>
            <output_port name="selected_goal_checker">Name of the selected goal checker received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive goal checker selection commands</input_port>
        </Action>
        <Condition ID="GoalReached">
            <input_port name="global_frame">Reference frame</input_port>
            <input_port name="goal">Destination</input_port>
            <input_port name="robot_base_frame">Robot base frame</input_port>
        </Condition>
        <Condition ID="GoalUpdated"/>
        <Decorator ID="GoalUpdatedController"/>
        <Decorator ID="GoalUpdater">
            <input_port name="input_goal">Original goal in</input_port>
            <output_port name="output_goal">Output goal set by subscription</output_port>
        </Decorator>
        <Condition ID="InitialPoseReceived"/>
        <Condition ID="IsBatteryLow">
            <input_port name="battery_topic">Topic for battery info</input_port>
            <input_port name="is_voltage">Bool if check based on voltage or total %</input_port>
            <input_port name="min_battery">Min battery % or voltage before triggering</input_port>
        </Condition>
        <Condition ID="IsPathValid">
            <input_port name="path"> Path to validate </input_port>
            <input_port name="server_timeout"> Server timeout </input_port>
        </Condition>
        <Condition ID="IsStuck"/>
        <SubTree ID="NavigateDetecting"/>
        <Action ID="NavigateThroughPoses">
            <input_port name="behavior_tree">Behavior tree to run</input_port>
            <input_port name="goals">Goals</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="NavigateToPose">
            <input_port name="behavior_tree">Behavior tree to run</input_port>
            <input_port name="goal">Goal</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <SubTree ID="NavigateWithReplanning">
            <input_port name="goals"/>
        </SubTree>
        <SubTree ID="NavigateWithReplanning1">
            <input_port name="first_wp"/>
            <input_port name="second_wp"/>
        </SubTree>
        <SubTree ID="NavigateWithReplanning1Snapshot">
            <input_port name="first_wp"/>
            <input_port name="second_wp"/>
        </SubTree>
        <Condition ID="PathExpiringTimer">
            <input_port name="path">Check if path has been updated to enable timer reset</input_port>
            <input_port name="seconds">Time to check if expired</input_port>
        </Condition>
        <Decorator ID="PathLongerOnApproach">
            <input_port name="length_factor">Length multiplication factor to check if the path is significantly longer </input_port>
            <input_port name="path">Planned Path</input_port>
            <input_port name="prox_len">Proximity length (m) for the path to be longer on approach</input_port>
        </Decorator>
        <Control ID="PipelineSequence"/>
        <Action ID="PlannerSelector">
            <input_port name="default_planner">Default planner of the planner selector</input_port>
            <output_port name="selected_planner">Name of the selected planner received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive planner selection commands</input_port>
        </Action>
        <Decorator ID="RateController">
            <input_port name="hz">Rate</input_port>
        </Decorator>
        <Control ID="RecoveryNode">
            <input_port name="number_of_retries">Number of retries</input_port>
        </Control>
        <Action ID="ReinitializeGlobalLocalization">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="RemovePassedGoals">
            <input_port name="global_frame">Global frame</input_port>
            <input_port name="input_goals">Input goals to remove if passed</input_port>
            <output_port name="output_goals">Set of goals after removing any passed</output_port>
            <input_port name="radius">Radius tolerance on a goal to consider it passed</input_port>
            <input_port name="robot_base_frame">Robot base frame</input_port>
        </Action>
        <Control ID="RoundRobin"/>
        <Decorator ID="SingleTrigger"/>
        <Action ID="SmoothPath">
            <input_port name="check_for_collisions">Bool if collision check should be performed</input_port>
            <input_port name="max_smoothing_duration">Maximum smoothing duration</input_port>
            <output_port name="smoothed_path">Smoothed path</output_port>
            <input_port default="SmoothPath" name="smoother_id"/>
            <output_port name="smoothing_duration">Smoothing duration</output_port>
            <input_port name="unsmoothed_path">Path to be smoothed</input_port>
            <output_port name="was_completed">True if smoothing was not interrupted by time limit</output_port>
        </Action>
        <Decorator ID="SpeedController">
            <input_port name="filter_duration">Duration (secs) for velocity smoothing filter</input_port>
            <input_port name="max_rate">Maximum rate</input_port>
            <input_port name="max_speed">Maximum speed</input_port>
            <input_port name="min_rate">Minimum rate</input_port>
            <input_port name="min_speed">Minimum speed</input_port>
        </Decorator>
        <Action ID="Spin">
            <input_port name="server_name">Service name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="spin_dist">Spin distance</input_port>
            <input_port name="time_allowance">Allowed time for spinning</input_port>
        </Action>
        <Condition ID="TimeExpired">
            <input_port name="seconds">Time to check if expired</input_port>
        </Condition>
        <Condition ID="TransformAvailable">
            <input_port name="child">Child frame for transform</input_port>
            <input_port name="parent">Parent frame for transform</input_port>
        </Condition>
        <Action ID="TruncatePath">
            <input_port name="distance">Distance before goal to truncate</input_port>
            <input_port name="input_path">Path to truncate</input_port>
            <output_port name="output_path">Truncated path to utilize</output_port>
        </Action>
        <Action ID="TruncatePathLocal">
            <input_port name="angular_distance_weight">Weight of angular distance relative to positional distance when finding which path pose is closest to robot. Not applicable on paths without orientations assigned</input_port>
            <input_port name="distance_backward">Distance in backward direction</input_port>
            <input_port name="distance_forward">Distance in forward direction</input_port>
            <input_port name="max_robot_pose_search_dist">Maximum forward integrated distance along the path (starting from the last detected pose) to bound the search for the closest pose to the robot. When set to infinity (default), whole path is searched every time</input_port>
            <output_port name="output_path">Truncated path to utilize</output_port>
            <input_port name="pose">Manually specified pose to be used if overriding current robot pose</input_port>
            <input_port name="robot_frame">Robot base frame id</input_port>
            <input_port name="transform_tolerance">Transform lookup tolerance</input_port>
        </Action>
        <Action ID="Wait">
            <input_port name="server_name">Service name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="wait_duration">Wait time</input_port>
        </Action>
        <Condition ID="Warning">
            <input_port name="data"/>
        </Condition>
        <Action ID="flyTo">
            <input_port name="target"/>
            <output_port name="visited"/>
        </Action>
        <SubTree ID="getSensorsData"/>
        <Condition ID="isBladeCompleted">
            <input_port name="blade"/>
        </Condition>
        <Condition ID="isDroneAt">
            <input_port name="data"/>
            <input_port name="target"/>
        </Condition>
        <Condition ID="isPhaseCompleted">
            <input_port name="phase"/>
        </Condition>
        <SubTree ID="performBlade">
            <input_port name="blade_angle"/>
        </SubTree>
        <SubTree ID="performPhase">
            <input_port name="first_corner"/>
            <input_port name="second_corner"/>
        </SubTree>
        <Condition ID="positionVisited">
            <input_port name="position"/>
        </Condition>
        <SubTree ID="postInspection"/>
        <SubTree ID="preflightChecks"/>
        <SubTree ID="warnings"/>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

